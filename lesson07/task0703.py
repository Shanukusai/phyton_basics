# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), # вычитание (__sub__()), # умножение (__mul__()), # деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
# обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться округление
# значения до целого числа.
# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n*****.


class Cell:
    def __init__(self, nam_nucleus):
        self.nam_nucleus = nam_nucleus

    def __add__(self, other):
        return Cell(self.nam_nucleus + other.nam_nucleus)

    def __sub__(self, other):
        if self.nam_nucleus - other.nam_nucleus > 0:
            return Cell(self.nam_nucleus - other.nam_nucleus)
        else:
            print('Разность количества клеток меньше нуля')
            return Cell(0)

    def __mul__(self, other):
        return Cell(self.nam_nucleus * other.nam_nucleus)

    def __truediv__(self, other):
        return Cell(round(self.nam_nucleus / other.nam_nucleus))

    def make_order(self, nam_row):
        cell_str = ''
        for i in range(self.nam_nucleus // int(nam_row)):
            cell_str += '*' * nam_row
            cell_str += '\n'
        cell_str += '*' * (self.nam_nucleus % int(nam_row))
        return cell_str


cell1 = Cell(5)
cell2 = Cell(3)

print('Складываем клетки')
print((cell1 + cell2).make_order(5))
print()
print('Вычитаем клетки')
print((cell1 - cell2).make_order(5))
print()
print('Умножаем клетки')
print((cell1 * cell2).make_order(5))
print()
print('Делим клетки')
print((cell1 / cell2).make_order(5))
